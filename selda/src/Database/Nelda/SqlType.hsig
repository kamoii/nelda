{-# LANGUAGE TypeFamilies #-}

signature Database.Nelda.SqlType where

-- * SqlTypeRep
-- SqlType 型クラスと一対一にすべき

data SqlTypeRep

instance Show SqlTypeRep
instance Eq SqlTypeRep
instance Ord SqlTypeRep

-- * SqlType

-- TODO: 何を SqlType にするべきか明確にする

-- ベースのもの(ライブラリが実装するもの)は st ~ OriginSqlType st となる。
-- 自分で拡張する際は OriginSqlType st と,メソッド間の整合が取れている必要がある
-- TODO: 安全に拡張してもらうために Deriving Strategy を提供すればいいかな？
class SqlType st where
    -- 本来なら SqlType (OriginSqlType st) という制約を付けたいが, GHC は superclass loopは許していない。
    -- OriginSqlType の用途は カラム定義で デフォルトの SqlType 以外を利用する場合に,
    -- 変えた型がデフォルトの SqlType と互換性があるかのチェックである。
    -- その際の制約が ToSqlType ct ~ OriginSqlType st' であり, SqlType (ToSqlType ct) なので
    -- 無理にここで制約をかける必要はない。
    type OriginSqlType st
    -- .hsig ではデフォルト実装は許されていない
    -- type OriginSqlType st = st

    -- カラム定義の DEFAULT値の埋込みを考えている。
    -- が,パラメータで渡せるなら不要かな？
    -- PREPARED STAATMENT時に 静的に定まるパラメータを埋込むことで最適化を図れる可能性はあるかな。
    -- embed :: st -> SqlFragment

-- instance SqlType Word where
--     type OriginSqlType Word = Word

-- instance SqlType Text where
--     type OriginSqlType Text = Text

-- instance SqlType Int where
--     type OriginSqlType Int = Int
